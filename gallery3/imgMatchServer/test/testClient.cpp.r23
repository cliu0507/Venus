/*
** client.c -- a stream socket client test program
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>

void sendCommand(struct addrinfo *servinfo, char *command, bool isQuery)
{
    int sockfd;
    struct addrinfo *p;

    // loop through all the results and connect to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
            perror("client: socket");
            continue;
        }

        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("client: connect");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "client: failed to connect\n");
        return;
    }

    printf("client: connected! sending command %s\n", command);

    if (send(sockfd, command, strlen(command), 0) == -1) {
        perror("send command addImage");
    }

	if(isQuery)
	{
		char buf[1000];
		int numbytes;

	    if ((numbytes = recv(sockfd, buf, 1000 - 1, 0)) == -1) {
		    perror("recv query result");
			return;
		}

		buf[numbytes] = '\0';

		printf("Query result = %s\n", buf);
	}

    close(sockfd);
}

int main(int argc, char *argv[])
{
    struct addrinfo hints, *servinfo;
    int rv;
    /* command format: add image     - "add:category_id:image_id:image_path"
     *                 remove image  - "del:category_id:image_id"
     *                 query by id   - "query_id:category_id:image_id:number"
     *                 query by path - "query_path:category_id:number:image_path"
     */
    char *command_addImage1 = (char *)"add:1:1:/home/wtfm2000/share/imgMatchServer/picture/1.jpg;2:/home/wtfm2000/share/imgMatchServer/picture/2.jpg;3:/home/wtfm2000/share/imgMatchServer/picture/3.jpg;";
	char *command_addImage2 = (char *)"add:1:4:/home/wtfm2000/share/imgMatchServer/picture/4.jpg;5:/home/wtfm2000/share/imgMatchServer/picture/5.jpg;";
    char *command_removeImage = (char *)"del:1:1;3;";
    char *command_queryId = (char *)"query_id:1:3:100";
    char *command_queryPath = (char *)"query_path:1:100:/home/wtfm2000/share/imgMatchServer/picture/3.jpg";

    if (argc != 3) {
        fprintf(stderr,"usage: hostname port\n");
        exit(1);
    }

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if ((rv = getaddrinfo(argv[1], argv[2], &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        exit(1);
    }
#if 0
    sendCommand(servinfo, command_addImage1, false);
    sendCommand(servinfo, command_addImage2, false);
    sendCommand(servinfo, command_removeImage, false);
#endif
    sendCommand(servinfo, command_queryId, true);
    sendCommand(servinfo, command_queryPath, true);

    freeaddrinfo(servinfo); // all done with this structure

    exit(0);
}
