/******************************************************************************
imgMatch ::  high-performance image matching server
---------------------------------------
begin                : Mon Sep 29 2014
email                : wtfm2000@gmail.com

Copyright (C) 2014-2014 Dongfeng Wang
 ******************************************************************************/

#ifndef IMGMEMLAYER_H
#define IMGMEMLAYER_H

//#define FACE_DETECTION_ENABLE

/* ImageMagick includes */
#include "imgProcessLayer.h"

// Weights for the Haar coefficients.
// Straight from the referenced paper:
const float weights[2][6][3]={
		// For scanned picture (sketch=0):
		//    Y      I      Q       idx total occurs
		{{ 5.00f, 19.21f, 34.37f},  // 0   58.58      1 (`DC' component)
			{ 0.83f,  1.26f,  0.36f},  // 1    2.45      3
			{ 1.01f,  0.44f,  0.45f},  // 2    1.90      5
			{ 0.52f,  0.53f,  0.14f},  // 3    1.19      7
			{ 0.47f,  0.28f,  0.18f},  // 4    0.93      9
			{ 0.30f,  0.14f,  0.27f}}, // 5    0.71      16384-25=16359

			// For handdrawn/painted sketch (sketch=1):
			//    Y      I      Q
			{{ 4.04f, 15.14f, 22.62f},
				{ 0.78f,  0.92f,  0.40f},
				{ 0.46f,  0.53f,  0.63f},
				{ 0.42f,  0.26f,  0.25f},
				{ 0.41f,  0.14f,  0.15f},
				{ 0.32f,  0.07f,  0.38f}}
};

// STL includes

#include <map>
#include <queue>
#include <list>

#ifdef LinuxBuild
    #include <ext/hash_set>
#else
    #include <hash_set>
#endif

// Global typedefs
typedef long int imageId;

/// Lists
typedef std::list<long int> long_list;
typedef long_list::iterator long_listIterator;

typedef std::list<imageId> imageId_list;
typedef imageId_list::iterator imageId_listIterator;

// Sets
#ifdef LinuxBuild
    using namespace __gnu_cxx;
    typedef __gnu_cxx::hash_set<int> int_hashset;
#else
    using namespace stdext;
    typedef stdext::hash_set<int> int_hashset;
#endif

#ifdef IMGMATCH_BUSINESS
/* persisted signature structure */
class SigStruct {
public:

	imageId id;			/* picture id */
	imageId associated_id;
	int bizId;
	Idx sig1[NUM_COEFS];		/* Y positions with largest magnitude */
	Idx sig2[NUM_COEFS];		/* I positions with largest magnitude */
	Idx sig3[NUM_COEFS];		/* Q positions with largest magnitude */
	double avgl[3];		/* YIQ for position [0,0] */
	/* image properties extracted when opened for the first time */
	int width;			/* in pixels */
	int height;			/* in pixels */

	SigStruct() {}
	~SigStruct()
	{

	}
};
#else
/* persisted signature structure */
class SigStruct {
public:

	imageId id;			/* picture id */
	Idx sig1[NUM_COEFS];		/* Y positions with largest magnitude */
	Idx sig2[NUM_COEFS];		/* I positions with largest magnitude */
	Idx sig3[NUM_COEFS];		/* Q positions with largest magnitude */
	double avgl[3];		/* YIQ for position [0,0] */
	/* image properties extracted when opened for the first time */
	int width;			/* in pixels */
	int height;			/* in pixels */

	SigStruct() {}
	~SigStruct()
	{

	}
};
#endif

struct cmpf
{
	bool operator()(const long int s1, const long int s2) const
	{
		return s1<s2;
	}
};

// typedefs
typedef std::map<const long int, SigStruct*, cmpf>::iterator sigIterator;
typedef long int (*long_array3)[1][1];
typedef std::map<const long int, SigStruct*, cmpf> sigMap;
typedef std::map<const long int, double, cmpf> distMap;
typedef std::map<const long int, double, cmpf>::iterator distMapIterator;
typedef std::vector<double> double_vector;
typedef std::vector<int> int_vector;
typedef int_vector::iterator intVectorIterator;
typedef std::vector<long int> longint_vector;
typedef longint_vector::iterator longintVectorIterator;

/* signature structure */
typedef struct srzMetaDataStruct_{
	int isValidMetadata;
	int iskVersion;
	int bindingLang;
	int isTrial;
	int compilePlat;
} srzMetaDataStruct;

/* signature structure */
#define AVG_IMGS_PER_DBSPACE 20000 // just a guess

class dbSpaceStruct {
public:
	dbSpaceStruct() {
	}

	~dbSpaceStruct()
	{
	}

	sigMap sigs;

	/* Lists of picture ids, indexed by [color-channel][sign][position], i.e.,
	   R=0/G=1/B=2, pos=0/neg=1, (i*NUM_PIXELS+j)
	 */
	imageId_list imgbuckets[3][2][16384];
	//std::vector<long int> imgIds;	/* img list */
} ;

typedef std::map<const int, dbSpaceStruct*> dbSpaceMapType;
typedef std::map<const int, dbSpaceStruct*>::iterator  dpspaceIterator;

// Serialization constants

#define	SRZ_VERSIONED			1
#define	SRZ_V0_5_1				1
#define	SRZ_V0_6_0				2
#define	SRZ_V0_7_0				3
#define	SRZ_CUR_VERSION			3
#define	SRZ_SINGLE_DBSPACE		1
#define	SRZ_MULTIPLE_DBSPACE	2
#define	SRZ_TRIAL_VERSION		1
#define	SRZ_FULL_VERSION		2
#define	SRZ_PLAT_WINDOWS		1
#define	SRZ_PLAT_LINUX			2
#define	SRZ_LANG_PYTHON			1
#define	SRZ_LANG_JAVA			2

// Private functions
//void saveGlobalSerializationMetadata(std::ofstream& f);

// Main exported functions
distMapQueue queryImgID(const int dbId, long int id,int numres,int sketch, bool colorOnly);
distMapQueue queryImgBlob(const int dbId, const char* data,const long length, int numres,int sketch, bool colorOnly);
distMapQueue queryImgPath(const int dbId, char* path,int numres,int sketch, bool colorOnly);
distMapQueue queryImgPathCloud(const int dbId, char* path,int numres,int sketch, bool colorOnly, int bizId);
distMapQueue queryImgData(const int dbId, Idx * sig1, Idx * sig2, Idx * sig3, double *avgl, int numres, int sketch, bool colorOnly, int bizId);
long_list queryImgDataForThresFast(sigMap * tsigs, double *avgl, float thresd, int sketch); 

int addImage(const int dbId, const long int id, const char* filename);
int addImageBiz(const int dbId, const int bizId, const long int id, const long int associatedId, const char* filename);
int savedb(const int dbId, char* filename);
int loaddb(const int dbId, char* filename);
bool loadFromDb(int domainId);
int savealldbs(char* filename);
int loadalldbs(char* filename);
int removeID(const int dbId, long int id);
int resetdb(const int dbId);
void initDbase(const int dbId);
void closeDbase();
long int getImgCount(const int dbId);
bool isImageOnDB(const int dbId, long int id);
int getImageHeight(const int dbId, long int id);
int getImageWidth(const int dbId, long int id);
double calcAvglDiff(const int dbId, long int id1, long int id2);
double calcDiff(const int dbId, long int id1, long int id2);
double_vector getImageAvgl(const int dbId, long int id1);
int addImageBlob(const int dbId, const long int id, const char *blob, const long length);
std::vector<int> getDBList();
std::vector<long int> getImgIdList(const int dbId);
bool isValidDB(const int dbId);
int destroydb(const int dbId);
bool removedb(const int dbId);

#endif

